{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["hostname","App","useEffect","addResponseMessage","handleJsonSingle","json","console","log","text","hasOwnProperty","buttons","map","x","label","title","value","payload","createButton","setQuickButtons","postMessage","message","process","requestOptions","method","headers","body","JSON","stringify","sender","fetch","then","response","forEach","handleJsonResponse","className","handleNewUserMessage","newMessage","handleQuickButtonClicked","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAAe,G,MAAA,IAA0B,kC,8BCOnCA,EAAW,kDA8EFC,MA3Ef,WACIC,qBAAU,WACNC,6BAAmB,mCACpB,IAEH,IAGMC,EAAmB,SAACC,GAGtB,GAFAC,QAAQC,IAAR,OAAoBF,GACpBF,6BAAmBE,EAAKG,MACpBH,EAAKI,eAAe,WAAY,CAChC,IAAIC,EAAUL,EAAKK,QAAQC,KAAI,SAAAC,GAAC,OAPnB,SAACA,GAClB,MAAO,CAACC,MAAMD,EAAEE,MAAOC,MAAMH,EAAEI,SAMSC,CAAaL,MACjDM,0BAAgBR,KASlBS,EAAc,SAACC,GACjBd,QAAQC,IAAIc,oIACZf,QAAQC,IAAI,eAAiBa,EAASpB,GAEtC,IAAMsB,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,OAAQ,SAASR,QAAQA,KAEvCS,MAAM7B,EACfsB,GAAgBQ,MAAK,SAAAC,GACjBA,EAAS1B,OAAOyB,MAAK,SAAAzB,IAjBN,SAACA,GACxBC,QAAQC,IAAR,WAAwBF,GACxBA,EAAK2B,QAAQ5B,GAgBD6B,CAAmB5B,UAiBnC,OACA,sBAAK6B,UAAU,MAAf,UACE,cAAC,SAAD,CACIC,qBAfuB,SAACC,GAC1B9B,QAAQC,IAAR,gCAAqC6B,IACrClB,0BAAgB,IAChBC,EAAYiB,IAaVC,yBAV2B,SAACjB,GAC9Bd,QAAQC,IAAI,wBAA0Ba,GACtCF,0BAAgB,IAChBC,EAAYC,MASd,yBAAQc,UAAU,aAAlB,UACE,qBAAKI,IAAKC,EAAML,UAAU,WAAWM,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEN,UAAU,WACVO,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,gCC5DOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c0550ff5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nimport React, { useState, useEffect } from 'react';\nimport { Widget, addResponseMessage, setQuickButtons, handleQuickButtonClicked } from 'react-chat-widget';\n\nimport 'react-chat-widget/lib/styles.css';\nconst hostname = \"http://20.57.184.176:5005/webhooks/rest/webhook\"\n//const hostname = \"http://localhost:5005/webhooks/rest/webhook\"\n\nfunction App() {\n    useEffect(() => {\n        addResponseMessage('Welcome to this awesome chat!');\n    }, []);\n\n    const createButton = (x) => {\n        return {label:x.title, value:x.payload};\n    }\n    const handleJsonSingle = (json) => {\n        console.log(`json`, json);\n        addResponseMessage(json.text);\n        if (json.hasOwnProperty(\"buttons\")) {\n            let buttons = json.buttons.map(x => createButton(x));\n            setQuickButtons(buttons);\n        }\n    }\n    const handleJsonResponse = (json) => {\n        console.log(`Top Json`, json);\n        json.forEach(handleJsonSingle);\n\n    }\n\n    const postMessage = (message) => {\n        console.log(process.env);\n        console.log('Post Message' + message, hostname);\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ sender: 'sender',message:message })\n        };\n        let result = fetch(hostname,\n            requestOptions).then(response => {\n                response.json().then(json => {\n                    handleJsonResponse(json);\n                });\n            });\n    }\n\n    const handleNewUserMessage = (newMessage) => {\n        console.log(`New message incoming! ${newMessage}`);\n        setQuickButtons([])\n        postMessage(newMessage);\n    }\n\n    const handleQuickButtonClicked = (message) => {\n        console.log('quick button clicked ' + message)\n        setQuickButtons([])\n        postMessage(message);\n    }\n\n    return (\n    <div className=\"App\">\n      <Widget\n          handleNewUserMessage={handleNewUserMessage}\n          handleQuickButtonClicked={handleQuickButtonClicked}\n      />\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}